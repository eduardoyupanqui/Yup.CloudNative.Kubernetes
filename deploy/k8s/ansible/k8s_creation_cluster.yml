---
- hosts: all
  # Se valida la variable de kubernetes a instalar. 
  become: true
  gather_facts: no
  vars:
    kubernetes_version: 1.21.1-00
  tasks:

    # Esta seccion prepara los nodos para la instalacion de kubernetes
    # -----------------------------------------------------------------------------
    - name: "Se actualiza los nombres de los hostnames"
      hostname:
        name: "{{ new_hostname }}"

    - name: 'Se agrega hostname a /etc/hosts'
      lineinfile:
        path: /etc/hosts
        regexp: '^127\.0\.0\.1[ \t]+localhost'
        line: '127.0.0.1 localhost {{ new_hostname }}'
        state: present 
   
    - name: Se descarga las llaves del repo Google Cloud SDK
      ansible.builtin.get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        dest: /etc/apt/trusted.gpg.d/gcloud.gpg
    - name: Se agrega el k8s repo
      ansible.builtin.apt_repository:
        filename: kubernetes.list
        repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
        update_cache: yes
    - name: apt update
      apt:
        update_cache: yes

    - name: remueve firewalls
      apt:
        state: absent
        pkg:
        - ufw

    - name: Agrega overlay in /etc/modules-load.d/containerd.conf
      lineinfile:
        path: /etc/modules-load.d/containerd.conf
        line: overlay
        create: yes

    - name: Agrega br_netfilter in /etc/modules-load.d/containerd.conf
      lineinfile:
        path: /etc/modules-load.d/containerd.conf
        line: br_netfilter
        create: yes

    - name: Configura parametros sysctl para Kubernetes.
      lineinfile:
        path: /etc/sysctl.d/99-kubernetes-cri.conf 
        line: "{{ item }}"
        create: yes
      with_items:
        - 'net.bridge.bridge-nf-call-iptables  = 1'
        - 'net.ipv4.ip_forward                 = 1'
        - 'net.bridge.bridge-nf-call-ip6tables = 1'

    - name: Se aplica comando modprobe overlay
      shell: modprobe overlay

    - name: Se aplica comando modprobe br_netfilter
      shell: modprobe br_netfilter
      
    - name: Se aplica comando sysctl --system
      shell: sysctl --system

    - name: Se deshabilita swap
      shell: swapoff -a

    - name: Remueve swap del fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    # Esta seccion instala el runtime containerd
    # -----------------------------------------------------------------------------
    - name: Instala container engine - containerd
      apt:
        state: latest
        pkg:
        - containerd

    - name: Se asegura que el directorio /etc/containerd exista
      file:
        path: /etc/containerd
        state: directory

    - name: Se copia la conf de containerd al archivo config.toml
      shell: containerd config default > /etc/containerd/config.toml

    - name: Se agrega SystemsCgroup
      lineinfile:
        path: /etc/containerd/config.toml
        line: "            SystemdCgroup = true"
        insertafter: '\[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options\]'
        firstmatch: yes
        state: present

    - name: Reiniciar y habilitar el servicio containerd
      ansible.builtin.service:
        name: containerd
        state: started
        enabled: yes

    # Esta seccion instala las herramientas para kubernetes
    # -----------------------------------------------------------------------------

    - name: Instala container engine - containerd
      apt:
        state: present
        pkg:
        - ca-certificates
        - gnupg-agent
        - software-properties-common
        - etcd-client
        - net-tools
        - apt-transport-https
        - python3-pip
        - nfs-common
        - curl
        - kubelet={{ kubernetes_version }}
        - kubeadm={{ kubernetes_version }}
        - kubectl={{ kubernetes_version }}

    - name: Se ejecuta pip3 install openshift pyyaml
      shell: pip3 install openshift pyyaml

    - name: Se ejecuta apt-mark hold kubelet kubeadm kubectl
      shell: apt-mark hold kubelet kubeadm kubectl containerd 

    - name: Habilita el servicio kubelet, y habilita persistencia
      service: 
        name: kubelet
        enabled: yes
    - name: Habilita el servicio containerd y habilita persistencia
      service: 
        name: containerd
        enabled: yes

- hosts: masters
  gather_facts: no
  vars:
    kubernetes_version: 1.21.1
  tasks:

    # Prepara los nodos para la instalacion de kubernetes
    # -----------------------------------------------------------------------------

    - name: Imprime los valores de la configuracion kubeadm en ClusterConfiguration.yaml
      shell: kubeadm config print init-defaults | tee ClusterConfiguration.yaml

    - name: Reemplaza el master ip
      replace:
        path: /home/ubuntu/ClusterConfiguration.yaml
        regexp: '1.2.3.4'
        replace: "{{ master_ip }}"
        backup: yes

    - name: Reemplaza criSocket por containerd
      replace:
        path: /home/ubuntu/ClusterConfiguration.yaml
        regexp: '\/var\/run\/dockershim\.sock'
        replace: '/run/containerd/containerd.sock'
        backup: yes

    - name: Configura parametros sysctl para Kubernetes.
      lineinfile:
        path: /home/ubuntu/ClusterConfiguration.yaml 
        line: "{{ item }}"
      with_items:
        - 'apiVersion: kubelet.config.k8s.io/v1beta1'
        - 'kind: KubeletConfiguration'
        - 'cgroupDriver: systemd' 

    - name: Reemplaza la version kubernetes
      replace:
        path: /home/ubuntu/ClusterConfiguration.yaml
        regexp: '1.21.0'
        replace: "{{ kubernetes_version }}"
        backup: yes
   
    - name: Inicializa el cluster
      become: true
      shell: kubeadm init --config=ClusterConfiguration.yaml --cri-socket /run/containerd/containerd.sock >> cluster_initialized.txt
      args:
       chdir: /home/ubuntu
       creates: cluster_initialized.txt

    - name: Crea el directorio .kube
      file:
       path: /home/ubuntu/.kube
       state: directory
       mode: 0755
    
    - name: Copia admin.conf a la ruta del usuario kube config
      become: true
      copy:
       src: /etc/kubernetes/admin.conf
       dest: /home/ubuntu/.kube/config
       remote_src: yes
       owner: ubuntu
       group: ubuntu
       mode: '0600'

    - name: Instala el plugin de red calico
      shell: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

    - name: Espera el plugin calico cni que este listo en el master
      shell: kubectl -n kube-system wait --for=condition=ready --all pods --timeout=5m

    - name: Instala las metricas en master
      shell: kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

    - name: Obtiene el token para unir los nodos con el master Kuberentes.
      shell: kubeadm token create  --print-join-command
      register: kubernetes_join_command

    - debug:
       msg: "{{ kubernetes_join_command.stdout }}"
 
    - name: Copia el join command hacia una archivo local.
      local_action: copy content="{{ kubernetes_join_command.stdout_lines[0] }}" dest="/tmp/kubernetes_join_command" mode=0777

- hosts: workers
  become: true
  gather_facts: yes
       
  tasks:
   - name: Copia el join command en los nodos worker.
     copy:
       src: /tmp/kubernetes_join_command
       dest: /tmp/kubernetes_join_command
       mode: 0777   

   - name: Une los nodos workers con el master.
     command: sh /tmp/kubernetes_join_command
     register: joined_or_not

   - debug:
       msg: "{{ joined_or_not.stdout }}"


- hosts: masters
  gather_facts: yes

  tasks:
    - name: Se descarga el binario Helm.
      become: true
      unarchive:
        src: https://get.helm.sh/helm-v3.6.2-linux-amd64.tar.gz
        dest: /tmp
        creates: /usr/local/bin/helm
        remote_src: yes

    - name: Mueve el binario helm en /usr/local/bin.
      become: true
      command: cp /tmp/linux-amd64/helm /usr/local/bin/helm
      args:
        creates: /usr/local/bin/helm

    - name: Agrega el repo chart Bitnami.
      community.kubernetes.helm_repository:
        name: bitnami
        repo_url: "https://charts.bitnami.com/bitnami"

    - name: Agrega el repo chart prom-community.
      community.kubernetes.helm_repository:
        name: prometheus-community
        repo_url: "https://prometheus-community.github.io/helm-charts"

    - name: Agrega el repo chart de Loki.
      community.kubernetes.helm_repository:
        name: loki
        repo_url: "https://grafana.github.io/loki/charts"

    - name: Create namespace monitoring
      k8s:
        name: monitoring
        api_version: v1
        kind: Namespace
        state: present

    - name: Instala prometheus stack
      kubernetes.core.helm:
        name: prometheus
        namespace: monitoring
        chart_ref: prometheus-community/kube-prometheus-stack

    - name: Instala loki-stack
      kubernetes.core.helm:
        name: loki
        namespace: monitoring
        chart_ref: loki/loki-stack

    - name: Instala phpMyAdmin con Helm.
      community.kubernetes.helm:
        name: phpmyadmin
        chart_ref: bitnami/phpmyadmin
        release_namespace: monitoring
        values:
          service:
            type: NodePort

    - name: Obtiene los detalles del servicio phpmyadmin.
      community.kubernetes.k8s:
        api_version: v1
        kind: Service
        name: phpmyadmin
        namespace: monitoring
      register: phpmyadmin_service


    - name: Asegura que las dependencias K8s esten instalados.
      pip:
        name: openshift
        state: present

    - name: Imprime el NodePort del servicio phpmyadmin.
      debug:
        var: phpmyadmin_service.result.spec.ports[0].nodePort

    - name: Expone nodeport a grafana
      shell: kubectl apply -f https://raw.githubusercontent.com/muchikon/platzi-scripts/master/np.yml
